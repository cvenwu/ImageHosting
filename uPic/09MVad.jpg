<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="GAN的定义 GAN是一个评估和学习生成模型的框架。生成模型的目标是学习到输入样本的分布，用来生成样本。GAN和传统的生成模型不同，使用两个内置模型以“对抗”的方式来使学习分布不断接近输入样本分布。两" />
    <meta property="og:description" content="GAN的定义 GAN是一个评估和学习生成模型的框架。生成模型的目标是学习到输入样本的分布，用来生成样本。GAN和传统的生成模型不同，使用两个内置模型以“对抗”的方式来使学习分布不断接近输入样本分布。两" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>GAN和CGAN——生成式对抗网络和条件生成式对抗网络 - 颀周 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=doIZISfk03KmIHdAFVJKSPTcfXReNrMsc7FhuTymoVg" />
    
    <link id="highlighter-theme-cnblogs" type="text/css" rel="stylesheet" href="/css/hljs/cnblogs.css?v=yKPfCbE6NGwg5Jn8Cm5G98RHufDcX_NIbkGDyVPvWPQ" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/qizhou/custom.css?v=J13dL9KtPmbSD7&#x2B;N6vFs/fHMRvo=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bluesky/bundle-bluesky-mobile.min.css?v=tr_MzP0zjEBjMFAPqb4u9j-7QlQbSBo-6z4-CTR7_Pw" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/qizhou/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/qizhou/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/qizhou/wlwmanifest.xml" />
    <script>
        var currentBlogId = 570129;
        var currentBlogApp = 'qizhou';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'BlueSky';
        var visitorUserId = '';
        var hasCustomScript = true;
        try {
            if (hasCustomScript && document.referrer && document.referrer.indexOf('baidu.com') >= 0) {
                Object.defineProperty(document, 'referrer', { value: '' });
                Object.defineProperty(Document.prototype, 'referrer', { get: function(){ return ''; } });
            }
        } catch(error) { }
        window.codeHighlightEngine = 1;
        window.enableCodeLineNumber = false;
        window.codeHighlightTheme = 'cnblogs';
    </script>
        <script>
            var currentPostDateAdded = '2020-08-03 22:44';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=swCqY-epQupB4FDBrkIUbrdmkVImgE3erJ3hQJlc4O0"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="skin-bluesky no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园">
                            <img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" />
                    </a>
                </li>
                <li><a href="/" onclick="countClicks('skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/qizhou/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/qizhou/">颀周</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/qizhou/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E9%A2%80%E5%91%A8">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qizhou/p/12795680.html">
    <span>GAN和CGAN——生成式对抗网络和条件生成式对抗网络</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>GAN的定义</h1>
<p>　　GAN是一个评估和学习生成模型的框架。生成模型的目标是学习到输入样本的分布，用来生成样本。GAN和传统的生成模型不同，使用两个内置模型以“对抗”的方式来使学习分布不断接近输入样本分布。两个模型一个是生成模型（Generative model），用来生成样本；另一个是判别模型（Discriminative model），产生判断样本是真实而不是来自生成模型的<strong>概率</strong>。生成模型并不直接学习输入样本的分布，而是通过“欺骗”判别模型的方式提高输入分布的逼近程度；判别模型则是使用生成样本和真实样本来提高判别准确率。</p>
<p>　　对于生成模型$G$和判别模型$D$，GAN的优化式的如下：</p>
<p style="text-align: center">$\min\limits_{G}\max\limits_{D} V(D,G)$</p>
<p style="text-align: center">$ V(D,G) = E_{x\sim p_{data}}[\log_{}D(x)] + E_{z\sim p_z}[\log_{}(1-D(G(z)))]$</p>
<p>　　其中$p_{data}$是样本的真实分布。比如对于某个分辨率的图片来说，这个分布基于这个分辨率上的所有图片。<strong>注意！</strong>即使是乱码图片，它也是有概率密度的，只不过很小很小而已。$p_z$是随机数$z$的分布，通常用高斯分布（文章用的是均匀分布，这是最早的文章）；$G(z)$就是生成器基于这个随机数生成的样本。$D(x)$是判别器判断样本$x$为真实样本的概率。&nbsp;</p>
<p>　　使用梯度下降法进行优化的过程如下：<img src="https://img2020.cnblogs.com/blog/1908255/202004/1908255-20200428174918555-1685875222.png" alt="" width="666" height="429" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>　　每次分别随机拿到$m$个真实和生成样本用来对函数（$\theta_d$、$\theta_g$分别包含在$D$和$G$中）</p>
<p style="text-align: center">$\displaystyle f(\theta_d) = \frac{1}{m}\sum\limits_{i=1}^{m}[\log_{}D(x^{(i)})+\log_{}(1-D(G(z^{(i)})))]$</p>
<p>　　梯度上升，也就是优化判别模型；再生成$m$个样本用来对函数</p>
<p style="text-align: center">$\displaystyle g(\theta_g)&nbsp;= \frac{1}{m}\sum\limits_{i=1}^{m}[\log_{}(1-D(G(z^{(i)})))]$</p>
<p>　　梯度下降也就是优化生成模型。最终二者都达到最优。</p>
<p>　　以下是拟合的过程图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1908255/202004/1908255-20200428180851948-1080093321.png" alt="" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>　　黑点线是样本$x$的真实分布，绿线是样本$x$的生成模型分布，蓝虚线是判别模型判断$x$属于真实的概率，下方的$z$是均匀分布随机数$z$到生成样本$x$的映射。</p>
<p>　　a图是初始化时，判别模型$D$和生成模型$G$都很差。</p>
<p>　　b图是取样本来更新$D$，$D$在此刻变为最优。也就是说，在当前的$G$下，对于每个$x$，都能正确得出它是真实样本的概率：</p>
<p style="text-align: center">$\displaystyle D(x) = \frac{p_{data}(x)}{p_{data}(x)+p_g(x)}$，</p>
<p>　　证明在后面，不过想想也是这么一回事。比如看绿线和黑点线中间的交叉点，此时$x$的真实概率为0.5。</p>
<p>　　c图是更新$G$，$G$在此刻$D$的基础上变得不错了。</p>
<p>　　d图是一直迭代到最后，$G$和真实分布一模一样，而$D$的判断概率全是0.5。但是，一模一样也不是很好。因为样本集总是有限的，并不能完全契合样本全体的分布，所以如果生成分布和样本集分布一模一样的话可能会过拟合。</p>
<h1>全局最优</h1>
<p>　　对任意给定的$G$，最优的$D$对每个样本$x$，都有：</p>
<p style="text-align: center">$D_G^*(x) = \displaystyle&nbsp;&nbsp;\frac{p_{data}(x)}{p_{data}(x)+p_g(x)}$</p>
<p>　　这是因为最优的$D$最大化关于$\theta_d$的函数：</p>
<p style="text-align: center">$\displaystyle V(G,D) = \int_x p_{data}(x)\log_{}(D(x)) + p_g(x)\log_{}(1-D(x))dx$　　</p>
<p>　　也就是对于每个$x$，这个积分内部函数都取最大值。对于函数</p>
<p style="text-align: center">$h(y) = a\log_{}(y)+b\log_{}(1-y),a\ge 0,b\ge 0$</p>
<p>　　在$0&lt; y &lt; y^*$时，$h'(y)$大于零；$y^*&lt; y &lt; 1$，$h'(y)$小于零。所以$h(y)$在</p>
<p style="text-align: center">$\displaystyle y^*=\frac{a}{a+b}$</p>
<p>　　时最大。因此得证。</p>
<p>　　假如$G$训练到了最优，也就是输出分布与输入样本分布相同，即$p_{data}=p_g$，而$D$也最优时，有：</p>
<p style="text-align: center">$\displaystyle V(D,G) = E_{x\sim p_{data}}\left[\log_{}\frac{p_{data}(x)}{p_{data}(x)+p_g(x)}\right] + E_{x\sim p_g}\left[\log_{}\frac{p_{g}(x)}{p_{data}(x)+p_g(x)}\right]$</p>
<p style="text-align: center">$\displaystyle&nbsp;= E_{x\sim p_{data}}\left[\log_{}\frac{1}{2}\right] + E_{x\sim p_g}\left[\log_{}\frac{1}{2}\right]=-\log_{}4$</p>
<h1>CGAN</h1>
<p>　　CGAN（Conditional GAN）是GAN的一种基本变通。相对于基本GAN的生成器和判别器，输入分别只有随机抽样和样本，CGAN的输入则可以附带条件。CGAN生成器的输入除了随机抽样外，还可以附加样本的一些特征，从而可以更加精确地生成我们期望的生成样本。判别器则是输入样本和对应的特征，联合这两者进行判断样本的“真实性”。</p>
<p>　　比如用CGAN训练MNIST时，我们想要让生成器能生成我们期望的数字。生成器的输入就是随机抽样+对应数字的one-hot编码，而判别器的输入就是生成的样本或真实样本+对应数字的one-hot编码。所以CGAN的优化函数就在GAN的基础上改改：</p>
<p style="text-align: center">$\max\limits_G\min\limits_D V(D,G) = E_{x\sim p_{data}}[\log_{}D(x|y)] + E_{z\sim p_z}[\log_{}(1-D(G(z|y)|y))]$</p>
<p>　　其中$y$是$x$的标签。上面$D$中表示的好像是条件概率，我觉得也可以直接理解为联合概率。生成器和判别器只需将它们的两个输入concatenate，后面的层就和GAN类似了。另外，上式没有对样本和标签不匹配的情况进行限制，论文中也没有写。这样的话，模型就可能生成比较真实但与标签不符的样本。所以训练时判别器还应该惩罚真实但标签错误的输入。</p>
<p>　　下面用MNIST训练CGAN来生成数字，模型结构是用CGAN论文中的。我原本是想用卷积网络来搭建，然而迭代了几万次都生成不出有点像数字的图，最终放弃。而仿照论文用全连接层搭建的模型，虽然也不是特别“真”，至少比我原来的模型效果好多了。下面是生成的数字图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1908255/202008/1908255-20200803222908535-58399835.png" alt="" width="586" height="293" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>　　一共迭代了1100次，每次迭代使用100个样本对生成器和判别器进行训练。随着迭代次数的增加，生成图片的效果逐渐变好，又逐渐崩坏，然后又逐渐变好，如此反复循环，所以要把握迭代停止的时机。理论上来讲，如果一直迭代下去，最终是会平稳下来的。但是我迭代到几千次甚至上万次，生成的图片效果依旧没有变得很好，具体原因不清楚，还有待发掘。</p>
<p>　　以下是训练代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%生成器</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> keras <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> layers,Input,Model,utils,activations
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> numpy as np

sample_num </span>= 200<span style="color: rgba(0, 0, 0, 1)">
Input_sampling </span>= Input(shape=<span style="color: rgba(0, 0, 0, 1)">[sample_num])
Input_label </span>= Input(shape=[10<span style="color: rgba(0, 0, 0, 1)">])
   
x1 </span>= layers.Dense(sample_num,activation=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">relu</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)(Input_sampling)
x2 </span>= layers.Dense(1000,activation=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">relu</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)(Input_label)
x </span>=<span style="color: rgba(0, 0, 0, 1)"> layers.concatenate([x1,x2])
x </span>= layers.Dropout(0.5<span style="color: rgba(0, 0, 0, 1)">)(x)
x </span>= layers.Dense(28*28,activation=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sigmoid</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)(x) 
x </span>= layers.Reshape([28,28,1<span style="color: rgba(0, 0, 0, 1)">])(x)

generator </span>=<span style="color: rgba(0, 0, 0, 1)"> Model([Input_label,Input_sampling],x) 
generator.summary()
utils.plot_model(generator)
</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%判别器</span>
Input_img = Input(shape=[28,28,1<span style="color: rgba(0, 0, 0, 1)">])

x1 </span>= layers.Reshape([28*28<span style="color: rgba(0, 0, 0, 1)">])(Input_img)
x1 </span>= layers.MaxoutDense(240,5<span style="color: rgba(0, 0, 0, 1)">)(x1)
x2 </span>= layers.MaxoutDense(50,5<span style="color: rgba(0, 0, 0, 1)">)(Input_label)
x </span>=<span style="color: rgba(0, 0, 0, 1)"> layers.concatenate([x1,x2])
x </span>= layers.MaxoutDense(240,4<span style="color: rgba(0, 0, 0, 1)">)(x)
x </span>= layers.Dropout(0.5<span style="color: rgba(0, 0, 0, 1)">)(x)
x </span>= layers.Dense(1,activation=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">sigmoid</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)(x)

discriminator </span>=<span style="color: rgba(0, 0, 0, 1)"> Model([Input_label,Input_img],x) 
discriminator.summary()
utils.plot_model(discriminator)
</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%合并模型GAN</span>
x =<span style="color: rgba(0, 0, 0, 1)"> generator([Input_label,Input_sampling])
x </span>=<span style="color: rgba(0, 0, 0, 1)"> discriminator([Input_label,x])
gan </span>=<span style="color: rgba(0, 0, 0, 1)"> Model([Input_label,Input_sampling],x) 
</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%数据预处理</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> keras.datasets <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> mnist 
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> numpy as np 
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt
(train_data,train_labels),(test_data,test_labels) </span>=<span style="color: rgba(0, 0, 0, 1)"> mnist.load_data() 
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> label_to_one_hot(labels):
  l </span>= np.zeros([len(labels),10<span style="color: rgba(0, 0, 0, 1)">])
  </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(len(labels)):
    l[i,labels[i]]</span>=1
  <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> l
train_data </span>= train_data[:,:,:,np.newaxis].astype(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">float</span><span style="color: rgba(128, 0, 0, 1)">'</span>)/255<span style="color: rgba(0, 0, 0, 1)">
test_data </span>= test_data[:,:,:,np.newaxis].astype(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">float</span><span style="color: rgba(128, 0, 0, 1)">'</span>)/255<span style="color: rgba(0, 0, 0, 1)">
train_labels </span>=<span style="color: rgba(0, 0, 0, 1)"> label_to_one_hot(train_labels)
test_labels </span>=<span style="color: rgba(0, 0, 0, 1)"> label_to_one_hot(test_labels)   
plt.imshow(train_data[0,:,:,0])    
</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%编译模型</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> tensorflow.keras <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> optimizers,losses
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> matplotlib.pyplot as plt

generator.trainable </span>=<span style="color: rgba(0, 0, 0, 1)"> True
discriminator.trainable </span>=<span style="color: rgba(0, 0, 0, 1)"> False 
gan_optimizer </span>=<span style="color: rgba(0, 0, 0, 1)"> optimizers.Adam()
gan.compile(
  optimizer</span>=<span style="color: rgba(0, 0, 0, 1)">gan_optimizer,
  loss</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">binary_crossentropy</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) 
discriminator.trainable </span>=<span style="color: rgba(0, 0, 0, 1)"> True
d_optimizer </span>=<span style="color: rgba(0, 0, 0, 1)"> optimizers.Adam()
discriminator.compile(
  optimizer</span>=<span style="color: rgba(0, 0, 0, 1)">d_optimizer,
  loss</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">binary_crossentropy</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)    
</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">%%训练</span>
<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_samples():
  </span><span style="color: rgba(0, 0, 255, 1)">return</span> np.random.random([batch_size,sample_num])*2-1
<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> train_generator(batch_size,if_show_loss): 
  samples </span>=<span style="color: rgba(0, 0, 0, 1)"> get_samples()
  labels </span>= np.zeros([batch_size,10<span style="color: rgba(0, 0, 0, 1)">]) 
  judges </span>= np.ones(batch_size) - np.abs(np.random.normal(scale=0.05,loc = 0,size =<span style="color: rgba(0, 0, 0, 1)"> batch_size)) 
  </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> labels:
    i[np.random.randint(</span>10)] = 1<span style="color: rgba(0, 0, 0, 1)">. 
  gan.fit([labels,samples],judges,verbose</span>=<span style="color: rgba(0, 0, 0, 1)">if_show_loss) 
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> train_discriminator(data,labels_true_right,batch_size,if_show_loss): 
  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">生成器生成图像</span>
  samples =<span style="color: rgba(0, 0, 0, 1)"> get_samples()
  labels_fake </span>= np.zeros([batch_size,10<span style="color: rgba(0, 0, 0, 1)">]) 
  </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> labels_fake:
    i[np.random.randint(</span>10)] = 1<span style="color: rgba(0, 0, 0, 1)">. 
  fake_imgs </span>=<span style="color: rgba(0, 0, 0, 1)"> generator.predict([labels_fake,samples])  
  </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">获取错误标签真图像</span>
  s = np.linspace(0,9,10).astype(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">int</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
  lebals_true_wrong </span>=<span style="color: rgba(0, 0, 0, 1)"> np.zeros_like(labels_true_right)
  </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(batch_size): 
    p </span>= np.ones(10)/9<span style="color: rgba(0, 0, 0, 1)">  
    p[np.argmax(labels_true_right[i])] </span>=<span style="color: rgba(0, 0, 0, 1)"> 0 
    lebals_true_wrong[i,np.random.choice(s,</span>1, p=p)] = 1
  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">将输入拼接</span>
  in_imgs = np.concatenate([fake_imgs,data,data],axis =<span style="color: rgba(0, 0, 0, 1)"> 0)
  in_labels </span>=<span style="color: rgba(0, 0, 0, 1)"> np.concatenate(
    [labels_fake,lebals_true_wrong,labels_true_right],
    axis </span>=<span style="color: rgba(0, 0, 0, 1)"> 0) 
  judges_wrong </span>= np.zeros(batch_size*2) + np.random.normal(scale=0.05,loc = 0,size = batch_size*2<span style="color: rgba(0, 0, 0, 1)">) 
  judges_right </span>= np.ones(batch_size) - np.random.normal(scale=0.05,loc = 0,size =<span style="color: rgba(0, 0, 0, 1)"> batch_size) 
  train_judges </span>= np.concatenate([judges_wrong,judges_right],axis=<span style="color: rgba(0, 0, 0, 1)">0)
  
  discriminator.fit([in_labels,in_imgs],train_judges,verbose</span>=<span style="color: rgba(0, 0, 0, 1)">if_show_loss)
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> save_img_and_model(num,i): 
  label </span>= np.zeros([1,10<span style="color: rgba(0, 0, 0, 1)">])
  label[0,num] </span>= 1<span style="color: rgba(0, 0, 0, 1)">
  img </span>=<span style="color: rgba(0, 0, 0, 1)"> generator.predict([label,get_samples()])
  plt.imshow( img[0,:,:,0],cmap</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bone</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
  plt.show( )

  generator.save(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">generator.h5</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
  discriminator.save(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">discriminator.h5</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

epochs </span>= 10000<span style="color: rgba(0, 0, 0, 1)">
batch_size </span>= 500<span style="color: rgba(0, 0, 0, 1)">
train_size </span>= 20000<span style="color: rgba(0, 0, 0, 1)">
now_train </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
</span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(epochs):
  </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(i)
  if_show_loss </span>=<span style="color: rgba(0, 0, 0, 1)"> False
  </span><span style="color: rgba(0, 0, 255, 1)">if</span> i % 20 ==<span style="color: rgba(0, 0, 0, 1)"> 0:
    if_show_loss </span>=<span style="color: rgba(0, 0, 0, 1)"> True 
    save_img_and_model(np.random.randint(</span>10<span style="color: rgba(0, 0, 0, 1)">),i)
  train_generator(batch_size,if_show_loss)
  train_discriminator(
    train_data[now_train:now_train</span>+<span style="color: rgba(0, 0, 0, 1)">batch_size],
    train_labels[now_train:now_train</span>+<span style="color: rgba(0, 0, 0, 1)">batch_size],
    batch_size,if_show_loss)
  now_train </span>= (now_train + batch_size)%train_size </pre>
</div>
<h1>参考文献</h1>
<p>　　<a href="https://www.researchgate.net/publication/263012109_Generative_Adversarial_Networks" target="_blank" rel="noopener">Generative Adversarial Networks</a></p>
<p>　　<a href="https://arxiv.org/abs/1411.1784v1" target="_blank" rel="noopener">Conditional&nbsp;Generative Adversarial Nets</a></p>
</div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-08-03 22:44</span>&nbsp;
<a href="https://www.cnblogs.com/qizhou/">颀周</a>&nbsp;
阅读(<span id="post_view_count">1755</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12795680" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12795680);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '12795680', targetLink: 'https://www.cnblogs.com/qizhou/p/12795680.html', title: 'GAN和CGAN——生成式对抗网络和条件生成式对抗网络' })">举报</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>

<script>
    markdown_highlight()
    var allowComments = true, cb_blogId = 570129, cb_blogApp = 'qizhou', cb_blogUserGuid = 'ce9c3763-e1d0-4077-546f-08d788fdd39f';
    var cb_entryId = 12795680, cb_entryCreatedDate = '2020-08-03 22:44', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a id="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="cnblogs_ch"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
            <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
        <div id="cnblogs_c2" class="under-post-card">
            <a href="https://cloud.baidu.com/campaign/2022developer/index.html?track=a3bf76b1cfd5f7267f7e29bd6952301957009407f6071b35#cloud" rel="nofollow" target="_blank" onclick="countCreativeClicks('C2-百度智能云-开年见礼')">
                <img src="https://img2022.cnblogs.com/blog/35695/202202/35695-20220217225133187-1009259458.jpg" alt="" onload="countCreativeImpressions('C2-百度智能云-开年见礼')" />
            </a>
        </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
        var commentManager = new blogCommentManager();
        commentManager.renderComments(0);
        fixPostBody();

                window.tocManager.displayDisableTocTips = false;
                window.tocManager.generateToc();
            setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2022 颀周
<br /><span id="poweredby">Powered by .NET 6 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
         <div id = "feedbackItem_clone" style="display:none">
  <div class="feedbackItem"> 
   <div class="feedbackListSubtitle"> 
    <a rel="nofollow noopener"  href="#4591359" class="layer">#2楼</a> 
    <a rel="nofollow noopener"  name="4591359" id="comment_anchor_"></a> 
    <span class="comment_date">2020-05-30 18:03</span> 
    <a rel="nofollow noopener"  id="a_comment_author_" href="https://home.cnblogs.com/u/2026925/" target="_blank">颀周啊啊啊</a> 
    <div class="feedbackManage">
      &nbsp;&nbsp; 
     <span class="comment_actions"><a rel="nofollow noopener"  href="javascript:void(0);" onclick="return ReplyComment(4591359, 'EYZJuo6NTOW6nj5BT4gnLwcwo1Zl/me2UNZb4hEDYKQiitdNVI7E1A==')" class="reply_com"></a>
      <div class="delete_com"></div></span> 
    </div>
    <div class="comment_vote">
     <div class="comment_digg_button">
      0
     </div>
     <div class="comment_burry_button">
      0
     </div> 
     <span class="comment_error" style="color: red"></span> 
     <a rel="nofollow noopener"  href="javascript:void(0);" class="comment_digg" onclick="return voteComment(4591359, 'Digg', this.parentElement, false);" style="display: none;"> 支持(0) </a> 
     <a rel="nofollow noopener"  href="javascript:void(0);" class="comment_burry" onclick="return voteComment(4591359, 'Bury', this.parentElement, false);" style="display: none;"> 反对(0) </a> 
    </div>
   </div> 
   <div class="feedbackCon">
    <div class="my_avatar"></div> 
    <div id="comment_body_" data-format-type="Markdown" class="blog_comment_body cnblogs-markdown bubble_left"> 
     <p>NH</p> 
    </div> 
   </div> 
 </div> 
</div> 
    </div>

    <input type="hidden" id="antiforgery_token" value="CfDJ8GsLOKiGtk1Au0UP1SouGdWpUeZmDvjOlscD6KMbbU8coeijl6tZxEYVd4yzhM1FgUI3-E2iDGsSWc8o4QQN9V6YKHpZ8R97bWQbC7tknet8wWpb4fPEUNadivotPpqT6wH4yUu6mpd_d9Q_A76GNRo" />
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-476124-1"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    var kv = getGACustom();
    if (kv) {
        gtag('set', kv);
    }
    gtag('config', 'UA-476124-1');
    </script>
    <script defer src="https://hm.baidu.com/hm.js?866c9be12d4a814454792b1fd0fed295"></script>
</body>
</html>